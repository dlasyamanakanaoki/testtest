name: pre-release
run-name: pre-release
on:
  push:
    branches:
      - feature/*
      - hotfix/*
jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Ref
        shell: bash
        id: check_ref
        run: |
          ACTION_TYPE="NONE"
          if [[ ${GITHUB_REF} =~ ^refs/heads/(feature|hotfix)/(.+)$ ]]; then
            BRANCH_TYPE=${BASH_REMATCH[1]}
            BRANCH_NAME=${BASH_REMATCH[2]}
            ACTION_TYPE="BRANCH"
            echo "ACTION_TYPE=${ACTION_TYPE}" >> "$GITHUB_OUTPUT"
            echo "BRANCH_TYPE=${BRANCH_TYPE}" >> "$GITHUB_OUTPUT"
            echo "BRANCH_NAME=${BRANCH_NAME}" >> "$GITHUB_OUTPUT"
          elif [[ ${GITHUB_REF} =~ ^refs/tags/(.+)$ ]]; then
            TAG_NAME=${BASH_REMATCH[1]}
            ACTION_TYPE="TAG"
            echo "ACTION_TYPE=${ACTION_TYPE}" >> "$GITHUB_OUTPUT"
            echo "TAG_NAME=${TAG_NAME}" >> "$GITHUB_OUTPUT"
          else
            echo "ACTION_TYPE=${ACTION_TYPE}" >> "$GITHUB_OUTPUT"
          fi

      - name: Update minor version
        if: steps.check_ref.outputs.ACTION_TYPE == 'BRANCH' && steps.check_ref.outputs.BRANCH_TYPE == 'feature'
        shell: bash
        id: update_minor_version
        run: |
          VERSION_FILE_PATH=version.txt
          VERSION_TXT=`cat ${VERSION_FILE_PATH}`

          function increment_minor_version() {
            if [[ ${1} =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              NEW_VERSION="v${BASH_REMATCH[1]}.$((BASH_REMATCH[2] + 1)).0"
            else
              NEW_VERSION=v1.0.0
            fi
            printf "$NEW_VERSION"
          }

          function check_tag() {
            IS_EXISTS_TAG=false
            while read line; do
              if [ "$line" = "${1}" ]; then
                IS_EXISTS_TAG=true
              fi
            done < <(git tag)
            RETURN_VALUE=0
            if $IS_EXISTS_TAG; then
              RETURN_VALUE=1
            fi
            return $RETURN_VALUE
          }

          if [[ ${VERSION_TXT} =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            NEW_VERSION_NUMBER="v${BASH_REMATCH[1]}.$((BASH_REMATCH[2] + 1)).0"
          else
            NEW_VERSION=v1.0.0
          fi

          GIT_DIFF=`git diff $(git merge-base origin/${{ github.event.repository.default_branch }} HEAD) version.txt`
          if ["$GIT_DIFF" = ""]; then
            NEW_VERSION_NUMBER=`increment_minor_version $VERSION_TXT`
            check_tag $NEW_VERSION_NUMBER
            IS_EXISTS_TAG=$?
            if [ $IS_EXISTS_TAG -eq 1 ]; then
              echo "aleady exists tag $VERSION_TXT"
              while :; do
                  check_tag $NEW_VERSION_NUMBER
                  IS_EXISTS_TAG=$?
                  if [ $IS_EXISTS_TAG -eq 0 ]; then
                    break
                  else
                    NEW_VERSION_NUMBER=`increment_minor_version $NEW_VERSION_NUMBER`
                  fi
              done
            fi
            printf ${NEW_VERSION_NUMBER} > ${VERSION_FILE_PATH} 
            echo "update version number ${VERSION_TXT} > ${NEW_VERSION_NUMBER}"
          else
            echo "skip update version number"
          fi

      - name: Update patch version
        if: steps.check_ref.outputs.ACTION_TYPE == 'BRANCH' && steps.check_ref.outputs.BRANCH_TYPE == 'hotfix'
        shell: bash
        id: update_patch_version
        run: |
          VERSION_FILE_PATH=version.txt
          VERSION_TXT=`cat ${VERSION_FILE_PATH}`

          function increment_patch_version() {
            if [[ ${1} =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              NEW_VERSION="v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.$((BASH_REMATCH[3] + 1))"
            else
              NEW_VERSION=v1.0.0
            fi
            printf "$NEW_VERSION"
          }

          function check_tag() {
            IS_EXISTS_TAG=false
            while read line; do
              if [ "$line" = "${1}" ]; then
                IS_EXISTS_TAG=true
              fi
            done < <(git tag)
            RETURN_VALUE=0
            if $IS_EXISTS_TAG; then
              RETURN_VALUE=1
            fi
            return $RETURN_VALUE
          }

          if [[ ${VERSION_TXT} =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            NEW_VERSION_NUMBER="v${BASH_REMATCH[1]}.$((BASH_REMATCH[2] + 1)).0"
          else
            NEW_VERSION=v1.0.0
          fi

          GIT_DIFF=`git diff $(git merge-base origin/${{ github.event.repository.default_branch }} HEAD) version.txt`
          if ["$GIT_DIFF" = ""]; then
            NEW_VERSION_NUMBER=`increment_patch_version $VERSION_TXT`
            check_tag $NEW_VERSION_NUMBER
            IS_EXISTS_TAG=$?
            if [ $IS_EXISTS_TAG -eq 1 ]; then
              echo "aleady exists tag $VERSION_TXT"
              while :; do
                  check_tag $NEW_VERSION_NUMBER
                  IS_EXISTS_TAG=$?
                  if [ $IS_EXISTS_TAG -eq 0 ]; then
                    break
                  else
                    NEW_VERSION_NUMBER=`increment_patch_version $NEW_VERSION_NUMBER`
                  fi
              done
            fi
            printf ${NEW_VERSION_NUMBER} > ${VERSION_FILE_PATH} 
            echo "update version number ${VERSION_TXT} > ${NEW_VERSION_NUMBER}"
          else
            echo "skip update version number"
          fi

      - name: Commit version.txt
        if: steps.check_ref.outputs.ACTION_TYPE == 'BRANCH'
        shell: bash
        id: commit_version_txt
        run: |
          GIT_DIFF=`git diff version.txt`
          if [[ "$GIT_DIFF" != "" ]]; then
            git remote set-url origin https://github-actions:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}
            git config --global user.name "${GITHUB_ACTOR}"
            git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
            git add version.txt
            git commit -m "update version.txt"
            git push origin HEAD:${GITHUB_REF}
          else
            echo "no changed"
          fi

      - name: Create Release Pull Request
        if: steps.check_ref.outputs.ACTION_TYPE == 'BRANCH'
        run: |
          PULL_REQUEST=`gh pr list -H ${{ steps.check_ref.outputs.BRANCH_TYPE }}/${{ steps.check_ref.outputs.BRANCH_NAME }}`
          if [[ $PULL_REQUEST != "" ]]; then
            gh pr create \
              -B ${{ github.event.repository.default_branch }} \
              -t '[generated][${{ steps.check_ref.outputs.BRANCH_TYPE }}]${{ steps.check_ref.outputs.BRANCH_NAME }}' \
              -b 'This is a generated pull request.' \
              -a ${{ github.actor }}
          fi

      - name: Create Release Object
        if: steps.check_ref.outputs.ACTION_TYPE == 'TAG'
        run: |
          echo ${{ steps.check_ref.outputs.TAG_NAME }}
