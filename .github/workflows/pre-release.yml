name: pre-release
run-name: pre-release
on:
  push:
    branches:
      - feature/*
      - hotfix/*
jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
    steps:
      - uses: actions/checkout@v4

      - name: Check Ref
        shell: bash
        id: check_ref
        run: |
          ACTION_TYPE="NONE"
          if [[ ${GITHUB_REF} =~ ^refs/heads/(feature|hotfix)/(.+)$ ]]; then
            BRANCH_TYPE=${BASH_REMATCH[1]}
            BRANCH_NAME=${BASH_REMATCH[2]}
            ACTION_TYPE="BRANCH"
            echo "ACTION_TYPE=${ACTION_TYPE}" >> "$GITHUB_OUTPUT"
            echo "BRANCH_TYPE=${BRANCH_TYPE}" >> "$GITHUB_OUTPUT"
            echo "BRANCH_NAME=${BRANCH_NAME}" >> "$GITHUB_OUTPUT"
          elif [[ ${GITHUB_REF} =~ ^refs/tags/(.+)$ ]]; then
            TAG_NAME=${BASH_REMATCH[1]}
            ACTION_TYPE="TAG"
            echo "ACTION_TYPE=${ACTION_TYPE}" >> "$GITHUB_OUTPUT"
            echo "TAG_NAME: ${TAG_NAME}" >> "$GITHUB_OUTPUT"
          else
            echo "ACTION_TYPE=${ACTION_TYPE}" >> "$GITHUB_OUTPUT"
          fi

      - name: Update minor version
        if: steps.check_ref.outputs.ACTION_TYPE == 'BRANCH' && steps.check_ref.outputs.BRANCH_TYPE == 'feature'
        shell: bash
        id: update_minor_version
        run: |
          VERSION_FILE_PATH=version.txt
          VERSION_TXT=`cat ${VERSION_FILE_PATH}`

          if [[ ${VERSION_TXT} =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            NEW_VERSION="v${BASH_REMATCH[1]}.$((BASH_REMATCH[2] + 1)).0"
            printf ${NEW_VERSION} > ${VERSION_FILE_PATH} 
            echo "update version number ${VERSION_TXT} > ${NEW_VERSION}"
          else
            NEW_VERSION=v1.0.0
            printf ${NEW_VERSION} > ${VERSION_FILE_PATH} 
            echo "update version number ${VERSION_TXT} > ${NEW_VERSION}"
          fi

      - name: Update patch version
        if: steps.check_ref.outputs.ACTION_TYPE == 'BRANCH' && steps.check_ref.outputs.BRANCH_TYPE == 'hotfix'
        shell: bash
        id: update_patch_version
        run: |
          VERSION_FILE_PATH=version.txt
          VERSION_TXT=`cat ${VERSION_FILE_PATH}`

          if [[ ${VERSION_TXT} =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            NEW_VERSION="v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.$((BASH_REMATCH[3] + 1))"
            printf ${NEW_VERSION} > ${VERSION_FILE_PATH} 
            echo "update version number ${VERSION_TXT} > ${NEW_VERSION}"
          else
            NEW_VERSION=v1.0.0
            printf ${NEW_VERSION} > ${VERSION_FILE_PATH} 
            echo "update version number ${VERSION_TXT} > ${NEW_VERSION}"
          fi

      - name: Commit version.txt
        if: steps.check_ref.outputs.ACTION_TYPE == 'BRANCH'
        shell: bash
        id: commit_version_txt
        run: |
          git add version.txt
          git commit -m "update version.txt"

      - name: Create Release Pull Request
        if: steps.check_ref.outputs.ACTION_TYPE == 'BRANCH'
        run: |
          gh pr create \
            -B ${{ github.event.repository.default_branch }} \
            -t '[generated][${{ steps.check_ref.outputs.BRANCH_TYPE }}]${{ steps.check_ref.outputs.BRANCH_NAME }}' \
            -b 'This is a generated pull request.' \
            -a ${{ github.actor }}

      - name: Create Release Object
        if: steps.check_ref.outputs.ACTION_TYPE == 'TAG'
        run: |
          echo ${{ steps.check_ref.outputs.TAG_NAME }}
